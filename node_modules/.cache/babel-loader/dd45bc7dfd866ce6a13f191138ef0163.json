{"ast":null,"code":"import { combineReducers } from 'redux';\n\nconst categorySelectedReducer = (selectedCategory = [], action) => {\n  if (action.type === 'CATEGORY_SELECTED') {\n    return action.payload;\n  }\n\n  return selectedCategory;\n}; //const filterSubCategories = (selectedCategory = [], action) => {\n//    if (action.type === 'FILTER_SUBCATEGORY') {\n//        return action.payload;\n//    }\n//    return selectedCategory;\n//}\n\n\nconst subCategorySelectedReducer = (selectedSubCategory = [], action) => {\n  if (action.type === 'SUBCATEGORY_SELECTED') {\n    return action.payload;\n  }\n\n  return selectedSubCategory;\n};\n\nexport default combineReducers({\n  categorySelected: categorySelectedReducer,\n  //filterSubCategory: filterSubCategories,\n  subCategorySelected: subCategorySelectedReducer\n});","map":{"version":3,"sources":["C:\\Users\\Shadow DIO\\ReactReduxSWAPIExample\\reactreduxswapiexample\\src\\reducers\\index.js"],"names":["combineReducers","categorySelectedReducer","selectedCategory","action","type","payload","subCategorySelectedReducer","selectedSubCategory","categorySelected","subCategorySelected"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,gBAAgB,GAAG,EAApB,EAAwBC,MAAxB,KAAmC;AAC/D,MAAIA,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACrC,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOH,gBAAP;AACH,CAND,C,CAQA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,MAAMI,0BAA0B,GAAG,CAACC,mBAAmB,GAAG,EAAvB,EAA2BJ,MAA3B,KAAsC;AACrE,MAAIA,MAAM,CAACC,IAAP,KAAgB,sBAApB,EAA4C;AACxC,WAAOD,MAAM,CAACE,OAAd;AACH;;AAED,SAAOE,mBAAP;AACH,CAND;;AAQA,eAAeP,eAAe,CAAC;AAC3BQ,EAAAA,gBAAgB,EAAEP,uBADS;AAE3B;AACAQ,EAAAA,mBAAmB,EAAEH;AAHM,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nconst categorySelectedReducer = (selectedCategory = [], action) => {\r\n    if (action.type === 'CATEGORY_SELECTED') {\r\n        return action.payload;\r\n    }\r\n\r\n    return selectedCategory;\r\n}\r\n\r\n//const filterSubCategories = (selectedCategory = [], action) => {\r\n//    if (action.type === 'FILTER_SUBCATEGORY') {\r\n//        return action.payload;\r\n//    }\r\n\r\n//    return selectedCategory;\r\n//}\r\n\r\nconst subCategorySelectedReducer = (selectedSubCategory = [], action) => {\r\n    if (action.type === 'SUBCATEGORY_SELECTED') {\r\n        return action.payload;\r\n    }\r\n\r\n    return selectedSubCategory;\r\n}\r\n\r\nexport default combineReducers({\r\n    categorySelected: categorySelectedReducer,\r\n    //filterSubCategory: filterSubCategories,\r\n    subCategorySelected: subCategorySelectedReducer\r\n});"]},"metadata":{},"sourceType":"module"}